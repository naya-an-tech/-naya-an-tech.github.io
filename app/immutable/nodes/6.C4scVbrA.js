import{s as Un,e as c,b as f,c as l,f as r,g as b,h as m,d as p,a as g,i as I,k as i,H as T,l as O,n as U}from"../chunks/scheduler.DJEw_kJ_.js";import{S as Qn,i as Vn,c as h,a as _,m as $,t as y,b as w,d as C}from"../chunks/index.BN7hZ-gT.js";import{P as jn,I as On}from"../chunks/post.DPmw0mVw.js";import{C as L}from"../chunks/code_copy.e7eGAK-I.js";function zn(k){let n,s,o,u=String.raw`<div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">poetry <span class="token function">add</span> <span class="token parameter variable">-G</span> dev sqlacodegen      </div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">Using version ^2.3.0.post1 <span class="token keyword">for</span> sqlacodegen</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">Updating dependencies</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">Resolving dependencies<span class="token punctuation">..</span>. <span class="token punctuation">(</span><span class="token number">0</span>.2s<span class="token punctuation">)</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">Because sqlacodegen <span class="token punctuation">(</span><span class="token number">2.3</span>.0.post1<span class="token punctuation">)</span> depends on SQLAlchemy <span class="token punctuation">(</span><span class="token operator">>=</span><span class="token number">0.9</span>.0,<span class="token operator">&lt;</span><span class="token number">2.0</span><span class="token punctuation">)</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"> and no versions of sqlacodegen match <span class="token operator">></span><span class="token number">2.3</span>.0.post1,<span class="token operator">&lt;</span><span class="token number">3.0</span>.0, sqlacodegen <span class="token punctuation">(</span><span class="token operator">>=</span><span class="token number">2.3</span>.0.post1,<span class="token operator">&lt;</span><span class="token number">3.0</span>.0<span class="token punctuation">)</span> requires SQLAlchemy <span class="token punctuation">(</span><span class="token operator">>=</span><span class="token number">0.9</span>.0,<span class="token operator">&lt;</span><span class="token number">2.0</span><span class="token punctuation">)</span>.</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">So, because hsmoa-growth depends on both sqlalchemy <span class="token punctuation">(</span>^2.0.27<span class="token punctuation">)</span> and sqlacodegen <span class="token punctuation">(</span>^2.3.0.post1<span class="token punctuation">)</span>, version solving failed.</div></div>`+"";return{c(){n=c("pre"),s=c("code"),o=new T(!1),this.h()},l(e){n=l(e,"PRE",{});var t=r(n);s=l(t,"CODE",{class:!0});var v=r(s);o=O(v,!1),v.forEach(p),t.forEach(p),this.h()},h(){o.a=null,g(s,"class","language-shell")},m(e,t){I(e,n,t),i(n,s),o.m(u,s)},p:U,d(e){e&&p(n)}}}function Hn(k){let n,s,o,u=String.raw`<div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">poetry show SQLAlchemy   </div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">    </div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"> name         <span class="token builtin class-name">:</span> sqlalchemy                   </div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"> version      <span class="token builtin class-name">:</span> <span class="token number">2.0</span>.27                       </div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"> description  <span class="token builtin class-name">:</span> Database Abstraction Library </div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">dependencies</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"> - greenlet <span class="token operator">!=</span><span class="token number">0.4</span>.17</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"> - typing-extensions <span class="token operator">>=</span><span class="token number">4.6</span>.0</div></div>`+"";return{c(){n=c("pre"),s=c("code"),o=new T(!1),this.h()},l(e){n=l(e,"PRE",{});var t=r(n);s=l(t,"CODE",{class:!0});var v=r(s);o=O(v,!1),v.forEach(p),t.forEach(p),this.h()},h(){o.a=null,g(s,"class","language-bash")},m(e,t){I(e,n,t),i(n,s),o.m(u,s)},p:U,d(e){e&&p(n)}}}function Mn(k){let n,s,o,u=String.raw`<div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">sqlacodegen postgresql://<span class="token punctuation">[</span>ID<span class="token punctuation">]</span>:<span class="token punctuation">[</span>PASSWORD<span class="token punctuation">]</span>@<span class="token punctuation">[</span>DB_URL<span class="token punctuation">]</span>:<span class="token punctuation">[</span>DB_PORT<span class="token punctuation">]</span>/<span class="token punctuation">[</span>DATABASE_NAME<span class="token punctuation">]</span> <span class="token parameter variable">--outfile</span> <span class="token punctuation">[</span>OUTPUT_MODEL.py<span class="token punctuation">]</span></div></div>`+"";return{c(){n=c("pre"),s=c("code"),o=new T(!1),this.h()},l(e){n=l(e,"PRE",{});var t=r(n);s=l(t,"CODE",{class:!0});var v=r(s);o=O(v,!1),v.forEach(p),t.forEach(p),this.h()},h(){o.a=null,g(s,"class","language-bash")},m(e,t){I(e,n,t),i(n,s),o.m(u,s)},p:U,d(e){e&&p(n)}}}function Fn(k){let n,s,o,u=String.raw`<div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> Column<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> String<span class="token punctuation">,</span> ForeignKey</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>ext<span class="token punctuation">.</span>declarative <span class="token keyword">import</span> declarative_base</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> relationship</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">Base <span class="token operator">=</span> declarative_base<span class="token punctuation">(</span><span class="token punctuation">)</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">    __tablename__ <span class="token operator">=</span> <span class="token string">'user'</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">    <span class="token builtin">id</span> <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">    name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">)</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">    email <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">,</span> unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token keyword">class</span> <span class="token class-name">Post</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">    __tablename__ <span class="token operator">=</span> <span class="token string">'post'</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">    <span class="token builtin">id</span> <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">    title <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">)</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">    content <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">)</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">    user_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">(</span><span class="token string">'user.id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">    user <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">'User'</span><span class="token punctuation">)</span></div></div>`+"";return{c(){n=c("pre"),s=c("code"),o=new T(!1),this.h()},l(e){n=l(e,"PRE",{});var t=r(n);s=l(t,"CODE",{class:!0});var v=r(s);o=O(v,!1),v.forEach(p),t.forEach(p),this.h()},h(){o.a=null,g(s,"class","language-python")},m(e,t){I(e,n,t),i(n,s),o.m(u,s)},p:U,d(e){e&&p(n)}}}function Kn(k){let n,s,o,u=String.raw`<div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token keyword">from</span> logging<span class="token punctuation">.</span>config <span class="token keyword">import</span> fileConfig</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> engine_from_config<span class="token punctuation">,</span> pool</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token keyword">from</span> alembic <span class="token keyword">import</span> context</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token comment"># this is the Alembic Config object, which provides</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token comment"># access to the values within the .ini file in use.</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">config <span class="token operator">=</span> context<span class="token punctuation">.</span>config</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token comment"># Interpret the config file for Python logging.</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token comment"># This line sets up loggers basically.</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">fileConfig<span class="token punctuation">(</span>config<span class="token punctuation">.</span>config_file_name<span class="token punctuation">)</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token comment"># add your model's MetaData object here</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token comment"># for 'autogenerate' support</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token comment"># from myapp import mymodel</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token comment"># target_metadata = mymodel.Base.metadata</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token keyword">from</span> models <span class="token keyword">import</span> Base  <span class="token comment"># Import your Base model</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">target_metadata <span class="token operator">=</span> Base<span class="token punctuation">.</span>metadata</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token comment"># other values from the config, defined by the needs of env.py,</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token comment"># can be acquired:</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token comment"># my_important_option = config.get_main_option("my_important_option")</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token comment"># ... etc.</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token keyword">def</span> <span class="token function">run_migrations_offline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">    <span class="token triple-quoted-string string">"""Run migrations in 'offline' mode.</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">    This configures the context with just a URL</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">    and not an Engine, though an Engine is acceptable</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">    here as well.  By skipping the Engine creation</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">    we don't even need a DBAPI to be available.</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">    Calls to context.execute() here emit the given string to the</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">    script output.</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">    """</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">    url <span class="token operator">=</span> config<span class="token punctuation">.</span>get_main_option<span class="token punctuation">(</span><span class="token string">"sqlalchemy.url"</span><span class="token punctuation">)</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">    context<span class="token punctuation">.</span>configure<span class="token punctuation">(</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">        url<span class="token operator">=</span>url<span class="token punctuation">,</span> target_metadata<span class="token operator">=</span>target_metadata<span class="token punctuation">,</span> literal_binds<span class="token operator">=</span><span class="token boolean">True</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">    <span class="token punctuation">)</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">    <span class="token keyword">with</span> context<span class="token punctuation">.</span>begin_transaction<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">        context<span class="token punctuation">.</span>run_migrations<span class="token punctuation">(</span><span class="token punctuation">)</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token keyword">def</span> <span class="token function">run_migrations_online</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">    <span class="token triple-quoted-string string">"""Run migrations in 'online' mode.</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">    In this scenario we need to create an Engine</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">    and associate a connection with the context.</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">    """</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">    connectable <span class="token operator">=</span> engine_from_config<span class="token punctuation">(</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">        config<span class="token punctuation">.</span>get_section<span class="token punctuation">(</span>config<span class="token punctuation">.</span>config_ini_section<span class="token punctuation">)</span><span class="token punctuation">,</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">        prefix<span class="token operator">=</span><span class="token string">"sqlalchemy."</span><span class="token punctuation">,</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">        poolclass<span class="token operator">=</span>pool<span class="token punctuation">.</span>NullPool<span class="token punctuation">,</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">    <span class="token punctuation">)</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">    <span class="token keyword">with</span> connectable<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> connection<span class="token punctuation">:</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">        context<span class="token punctuation">.</span>configure<span class="token punctuation">(</span>connection<span class="token operator">=</span>connection<span class="token punctuation">,</span> target_metadata<span class="token operator">=</span>target_metadata<span class="token punctuation">)</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">        <span class="token keyword">with</span> context<span class="token punctuation">.</span>begin_transaction<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">            context<span class="token punctuation">.</span>run_migrations<span class="token punctuation">(</span><span class="token punctuation">)</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token keyword">if</span> context<span class="token punctuation">.</span>is_offline_mode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">    run_migrations_offline<span class="token punctuation">(</span><span class="token punctuation">)</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token keyword">else</span><span class="token punctuation">:</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">    run_migrations_online<span class="token punctuation">(</span><span class="token punctuation">)</span></div></div>`+"";return{c(){n=c("pre"),s=c("code"),o=new T(!1),this.h()},l(e){n=l(e,"PRE",{});var t=r(n);s=l(t,"CODE",{class:!0});var v=r(s);o=O(v,!1),v.forEach(p),t.forEach(p),this.h()},h(){o.a=null,g(s,"class","language-python")},m(e,t){I(e,n,t),i(n,s),o.m(u,s)},p:U,d(e){e&&p(n)}}}function Nn(k){let n,s,o,u=String.raw`<div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">alembic revision <span class="token operator">-</span><span class="token operator">-</span>autogenerate <span class="token operator">-</span>m <span class="token string">"Initial migration"</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"></div></div>`+"";return{c(){n=c("pre"),s=c("code"),o=new T(!1),this.h()},l(e){n=l(e,"PRE",{});var t=r(n);s=l(t,"CODE",{class:!0});var v=r(s);o=O(v,!1),v.forEach(p),t.forEach(p),this.h()},h(){o.a=null,g(s,"class","language-python")},m(e,t){I(e,n,t),i(n,s),o.m(u,s)},p:U,d(e){e&&p(n)}}}function Gn(k){let n,s,o,u=String.raw`<div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">alembic upgrade head</div></div>`+"";return{c(){n=c("pre"),s=c("code"),o=new T(!1),this.h()},l(e){n=l(e,"PRE",{});var t=r(n);s=l(t,"CODE",{class:!0});var v=r(s);o=O(v,!1),v.forEach(p),t.forEach(p),this.h()},h(){o.a=null,g(s,"class","language-python")},m(e,t){I(e,n,t),i(n,s),o.m(u,s)},p:U,d(e){e&&p(n)}}}function Wn(k){let n,s,o="sqlacodegen 설치",u,e,t,v,Q,xn=`sqlacodegen의 경우 SQLAlchemy의 버전이 SQLAlchemy (>=0.9.0,<2.0) 사이에 있어야한다. 필자의 경우 2.0
      이상이어서 버전 다운그레이드를 했다.`,pn,V,Pn="SQLAlchemy 버전 확인",vn,j,E,rn,Z,A,un,z,qn="버전을 다운그레이드 후 아래의 명령어로 특정 db의 table들을 추출해서 model.py 을 만들어보자",fn,H,x,mn,nn,R,kn,M,Sn="아래와 같은 결과가 나온다.",gn,F,P,bn,K,Dn="이제 이 model을 활용해서 alembic을 설정해보자.",hn,N,In="alembic/env.py",_n,G,q,$n,B,An="5. 마이그레이션 진행",yn,W,S,wn,J,Rn="적용",Cn,X,D,En,Y,Bn=`이 과정을 통해 데이터베이스 메타데이터를 기반으로 자동으로 생성된 모델 클래스를 사용하여 Alembic 마이그레이션을
      관리할 수 있습니다. 이 방법을 사용하면 기존 데이터베이스 스키마를 쉽게 SQLAlchemy 모델로 변환하고, 이를 기반으로
      마이그레이션을 생성 및 관리할 수 있습니다.`,dn;return t=new L({props:{$$slots:{default:[zn]},$$scope:{ctx:k}}}),E=new L({props:{$$slots:{default:[Hn]},$$scope:{ctx:k}}}),A=new On({props:{src:"/easy-database-to-model-conversion/0_Untitled.png",alt:"image"}}),x=new L({props:{$$slots:{default:[Mn]},$$scope:{ctx:k}}}),R=new On({props:{src:"/easy-database-to-model-conversion/1_Untitled.png",alt:"image"}}),P=new L({props:{$$slots:{default:[Fn]},$$scope:{ctx:k}}}),q=new L({props:{$$slots:{default:[Kn]},$$scope:{ctx:k}}}),S=new L({props:{$$slots:{default:[Nn]},$$scope:{ctx:k}}}),D=new L({props:{$$slots:{default:[Gn]},$$scope:{ctx:k}}}),{c(){n=c("article"),s=c("p"),s.textContent=o,u=f(),e=c("div"),h(t.$$.fragment),v=f(),Q=c("p"),Q.textContent=xn,pn=f(),V=c("p"),V.textContent=Pn,vn=f(),j=c("div"),h(E.$$.fragment),rn=f(),Z=c("p"),h(A.$$.fragment),un=f(),z=c("p"),z.textContent=qn,fn=f(),H=c("div"),h(x.$$.fragment),mn=f(),nn=c("p"),h(R.$$.fragment),kn=f(),M=c("p"),M.textContent=Sn,gn=f(),F=c("div"),h(P.$$.fragment),bn=f(),K=c("p"),K.textContent=Dn,hn=f(),N=c("p"),N.textContent=In,_n=f(),G=c("div"),h(q.$$.fragment),$n=f(),B=c("h1"),B.textContent=An,yn=f(),W=c("div"),h(S.$$.fragment),wn=f(),J=c("p"),J.textContent=Rn,Cn=f(),X=c("div"),h(D.$$.fragment),En=f(),Y=c("p"),Y.textContent=Bn,this.h()},l(d){n=l(d,"ARTICLE",{slot:!0});var a=r(n);s=l(a,"P",{"data-svelte-h":!0}),b(s)!=="svelte-fyh6oc"&&(s.textContent=o),u=m(a),e=l(a,"DIV",{class:!0});var sn=r(e);_(t.$$.fragment,sn),sn.forEach(p),v=m(a),Q=l(a,"P",{"data-svelte-h":!0}),b(Q)!=="svelte-s2yb5x"&&(Q.textContent=xn),pn=m(a),V=l(a,"P",{"data-svelte-h":!0}),b(V)!=="svelte-iyuxu2"&&(V.textContent=Pn),vn=m(a),j=l(a,"DIV",{class:!0});var an=r(j);_(E.$$.fragment,an),an.forEach(p),rn=m(a),Z=l(a,"P",{});var en=r(Z);_(A.$$.fragment,en),en.forEach(p),un=m(a),z=l(a,"P",{"data-svelte-h":!0}),b(z)!=="svelte-1y1w4hc"&&(z.textContent=qn),fn=m(a),H=l(a,"DIV",{class:!0});var on=r(H);_(x.$$.fragment,on),on.forEach(p),mn=m(a),nn=l(a,"P",{});var tn=r(nn);_(R.$$.fragment,tn),tn.forEach(p),kn=m(a),M=l(a,"P",{"data-svelte-h":!0}),b(M)!=="svelte-115k2b5"&&(M.textContent=Sn),gn=m(a),F=l(a,"DIV",{class:!0});var cn=r(F);_(P.$$.fragment,cn),cn.forEach(p),bn=m(a),K=l(a,"P",{"data-svelte-h":!0}),b(K)!=="svelte-6wzyt8"&&(K.textContent=Dn),hn=m(a),N=l(a,"P",{"data-svelte-h":!0}),b(N)!=="svelte-1029hyg"&&(N.textContent=In),_n=m(a),G=l(a,"DIV",{class:!0});var ln=r(G);_(q.$$.fragment,ln),ln.forEach(p),$n=m(a),B=l(a,"H1",{id:!0,"data-svelte-h":!0}),b(B)!=="svelte-1q62dkc"&&(B.textContent=An),yn=m(a),W=l(a,"DIV",{class:!0});var Ln=r(W);_(S.$$.fragment,Ln),Ln.forEach(p),wn=m(a),J=l(a,"P",{"data-svelte-h":!0}),b(J)!=="svelte-1h2pujm"&&(J.textContent=Rn),Cn=m(a),X=l(a,"DIV",{class:!0});var Tn=r(X);_(D.$$.fragment,Tn),Tn.forEach(p),En=m(a),Y=l(a,"P",{"data-svelte-h":!0}),b(Y)!=="svelte-81f00v"&&(Y.textContent=Bn),a.forEach(p),this.h()},h(){g(e,"class","code-block"),g(j,"class","code-block"),g(H,"class","code-block"),g(F,"class","code-block"),g(G,"class","code-block"),g(B,"id","5. 마이그레이션 진행"),g(W,"class","code-block"),g(X,"class","code-block"),g(n,"slot","post_content")},m(d,a){I(d,n,a),i(n,s),i(n,u),i(n,e),$(t,e,null),i(n,v),i(n,Q),i(n,pn),i(n,V),i(n,vn),i(n,j),$(E,j,null),i(n,rn),i(n,Z),$(A,Z,null),i(n,un),i(n,z),i(n,fn),i(n,H),$(x,H,null),i(n,mn),i(n,nn),$(R,nn,null),i(n,kn),i(n,M),i(n,gn),i(n,F),$(P,F,null),i(n,bn),i(n,K),i(n,hn),i(n,N),i(n,_n),i(n,G),$(q,G,null),i(n,$n),i(n,B),i(n,yn),i(n,W),$(S,W,null),i(n,wn),i(n,J),i(n,Cn),i(n,X),$(D,X,null),i(n,En),i(n,Y),dn=!0},p(d,a){const sn={};a&1&&(sn.$$scope={dirty:a,ctx:d}),t.$set(sn);const an={};a&1&&(an.$$scope={dirty:a,ctx:d}),E.$set(an);const en={};a&1&&(en.$$scope={dirty:a,ctx:d}),x.$set(en);const on={};a&1&&(on.$$scope={dirty:a,ctx:d}),P.$set(on);const tn={};a&1&&(tn.$$scope={dirty:a,ctx:d}),q.$set(tn);const cn={};a&1&&(cn.$$scope={dirty:a,ctx:d}),S.$set(cn);const ln={};a&1&&(ln.$$scope={dirty:a,ctx:d}),D.$set(ln)},i(d){dn||(y(t.$$.fragment,d),y(E.$$.fragment,d),y(A.$$.fragment,d),y(x.$$.fragment,d),y(R.$$.fragment,d),y(P.$$.fragment,d),y(q.$$.fragment,d),y(S.$$.fragment,d),y(D.$$.fragment,d),dn=!0)},o(d){w(t.$$.fragment,d),w(E.$$.fragment,d),w(A.$$.fragment,d),w(x.$$.fragment,d),w(R.$$.fragment,d),w(P.$$.fragment,d),w(q.$$.fragment,d),w(S.$$.fragment,d),w(D.$$.fragment,d),dn=!1},d(d){d&&p(n),C(t),C(E),C(A),C(x),C(R),C(P),C(q),C(S),C(D)}}}function Jn(k){let n,s;return n=new jn({props:{$$slots:{post_content:[Wn]},$$scope:{ctx:k}}}),{c(){h(n.$$.fragment)},l(o){_(n.$$.fragment,o)},m(o,u){$(n,o,u),s=!0},p(o,[u]){const e={};u&1&&(e.$$scope={dirty:u,ctx:o}),n.$set(e)},i(o){s||(y(n.$$.fragment,o),s=!0)},o(o){w(n.$$.fragment,o),s=!1},d(o){C(n,o)}}}class ss extends Qn{constructor(n){super(),Vn(this,n,null,Jn,Un,{})}}export{ss as component};
