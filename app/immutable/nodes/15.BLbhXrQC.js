import{s as Ms,e as i,b as c,c as t,f as u,g as f,h as d,d as r,a as b,i as z,k as e,H as fn,l as un,n as mn}from"../chunks/scheduler.DJEw_kJ_.js";import{S as As,i as Ds,c as _,a as k,m as $,t as x,b as C,d as w}from"../chunks/index.BN7hZ-gT.js";import{P as Is,I as is}from"../chunks/post.C3wZAPR7.js";import{C as rn}from"../chunks/code_copy.DLkmWeWK.js";function Ss(h){let n,a,o,g=String.raw`<div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">pip <span class="token function">install</span> alembic </div></div>`+"";return{c(){n=i("pre"),a=i("code"),o=new fn(!1),this.h()},l(l){n=t(l,"PRE",{});var p=u(n);a=t(p,"CODE",{class:!0});var m=u(a);o=un(m,!1),m.forEach(r),p.forEach(r),this.h()},h(){o.a=null,b(a,"class","language-bash")},m(l,p){z(l,n,p),e(n,a),o.m(g,a)},p:mn,d(l){l&&r(n)}}}function Rs(h){let n,a,o,g=String.raw`<div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">alembic init alembic </div></div>`+"";return{c(){n=i("pre"),a=i("code"),o=new fn(!1),this.h()},l(l){n=t(l,"PRE",{});var p=u(n);a=t(p,"CODE",{class:!0});var m=u(a);o=un(m,!1),m.forEach(r),p.forEach(r),this.h()},h(){o.a=null,b(a,"class","language-bash")},m(l,p){z(l,n,p),e(n,a),o.m(g,a)},p:mn,d(l){l&&r(n)}}}function js(h){let n,a,o,g=String.raw`<div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"># alembic.ini</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">[alembic]</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"># path to migration scripts</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">script_location = alembic</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">[loggers]</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">keys = root,sqlalchemy,alembic</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">[handlers]</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">keys = console</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">[formatters]</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">keys = generic</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">[logger_root]</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">level = WARN</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">handlers = console</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">qualname =</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">[logger_sqlalchemy]</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">level = WARN</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">handlers = console</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">qualname = sqlalchemy.engine</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">propagate = 0</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">[logger_alembic]</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">level = INFO</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">handlers = console</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">qualname = alembic</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">propagate = 0</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">[handler_console]</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">class = StreamHandler</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">args = (sys.stderr,)</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">level = NOTSET</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">formatter = generic</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">[formatter_generic]</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">format = %(asctime)s %(levelname)-5.5s [%(name)s] %(message)s</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"># PostgreSQL example</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">sqlalchemy.url = postgresql://user:password@localhost/dbname</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"></div></div>`+"";return{c(){n=i("pre"),a=i("code"),o=new fn(!1),this.h()},l(l){n=t(l,"PRE",{});var p=u(n);a=t(p,"CODE",{class:!0});var m=u(a);o=un(m,!1),m.forEach(r),p.forEach(r),this.h()},h(){o.a=null,b(a,"class","language-plain")},m(l,p){z(l,n,p),e(n,a),o.m(g,a)},p:mn,d(l){l&&r(n)}}}function Os(h){let n,a,o,g=String.raw`<div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token comment"># alembic/env.py</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token keyword">from</span> logging<span class="token punctuation">.</span>config <span class="token keyword">import</span> fileConfig</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> engine_from_config<span class="token punctuation">,</span> pool</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token keyword">from</span> alembic <span class="token keyword">import</span> context</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token comment"># this is the Alembic Config object, which provides</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token comment"># access to the values within the .ini file in use.</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">config <span class="token operator">=</span> context<span class="token punctuation">.</span>config</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token comment"># Interpret the config file for Python logging.</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token comment"># This line sets up loggers basically.</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">fileConfig<span class="token punctuation">(</span>config<span class="token punctuation">.</span>config_file_name<span class="token punctuation">)</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token comment"># add your model's MetaData object here</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token comment"># for 'autogenerate' support</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token comment"># from myapp import mymodel</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token comment"># target_metadata = mymodel.Base.metadata</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token keyword">from</span> app<span class="token punctuation">.</span>models <span class="token keyword">import</span> Base  <span class="token comment"># Import your Base model</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">target_metadata <span class="token operator">=</span> Base<span class="token punctuation">.</span>metadata</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token comment"># other values from the config, defined by the needs of env.py,</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token comment"># can be acquired:</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token comment"># my_important_option = config.get_main_option("my_important_option")</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token comment"># ... etc.</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token keyword">def</span> <span class="token function">run_migrations_offline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">    <span class="token triple-quoted-string string">"""Run migrations in 'offline' mode.</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">    This configures the context with just a URL</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">    and not an Engine, though an Engine is acceptable</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">    here as well.  By skipping the Engine creation</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">    we don't even need a DBAPI to be available.</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">    Calls to context.execute() here emit the given string to the</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">    script output.</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">    """</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">    url <span class="token operator">=</span> config<span class="token punctuation">.</span>get_main_option<span class="token punctuation">(</span><span class="token string">"sqlalchemy.url"</span><span class="token punctuation">)</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">    context<span class="token punctuation">.</span>configure<span class="token punctuation">(</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">        url<span class="token operator">=</span>url<span class="token punctuation">,</span> target_metadata<span class="token operator">=</span>target_metadata<span class="token punctuation">,</span> literal_binds<span class="token operator">=</span><span class="token boolean">True</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">    <span class="token punctuation">)</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">    <span class="token keyword">with</span> context<span class="token punctuation">.</span>begin_transaction<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">        context<span class="token punctuation">.</span>run_migrations<span class="token punctuation">(</span><span class="token punctuation">)</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token keyword">def</span> <span class="token function">run_migrations_online</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">    <span class="token triple-quoted-string string">"""Run migrations in 'online' mode.</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">    In this scenario we need to create an Engine</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">    and associate a connection with the context.</div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">    """</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">    connectable <span class="token operator">=</span> engine_from_config<span class="token punctuation">(</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">        config<span class="token punctuation">.</span>get_section<span class="token punctuation">(</span>config<span class="token punctuation">.</span>config_ini_section<span class="token punctuation">)</span><span class="token punctuation">,</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">        prefix<span class="token operator">=</span><span class="token string">"sqlalchemy."</span><span class="token punctuation">,</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">        poolclass<span class="token operator">=</span>pool<span class="token punctuation">.</span>NullPool<span class="token punctuation">,</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">    <span class="token punctuation">)</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">    <span class="token keyword">with</span> connectable<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> connection<span class="token punctuation">:</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">        context<span class="token punctuation">.</span>configure<span class="token punctuation">(</span>connection<span class="token operator">=</span>connection<span class="token punctuation">,</span> target_metadata<span class="token operator">=</span>target_metadata<span class="token punctuation">)</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">        <span class="token keyword">with</span> context<span class="token punctuation">.</span>begin_transaction<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">            context<span class="token punctuation">.</span>run_migrations<span class="token punctuation">(</span><span class="token punctuation">)</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token keyword">if</span> context<span class="token punctuation">.</span>is_offline_mode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">    run_migrations_offline<span class="token punctuation">(</span><span class="token punctuation">)</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"><span class="token keyword">else</span><span class="token punctuation">:</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">    run_migrations_online<span class="token punctuation">(</span><span class="token punctuation">)</span></div></div><div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content"></div></div>`+"";return{c(){n=i("pre"),a=i("code"),o=new fn(!1),this.h()},l(l){n=t(l,"PRE",{});var p=u(n);a=t(p,"CODE",{class:!0});var m=u(a);o=un(m,!1),m.forEach(r),p.forEach(r),this.h()},h(){o.a=null,b(a,"class","language-python")},m(l,p){z(l,n,p),e(n,a),o.m(g,a)},p:mn,d(l){l&&r(n)}}}function Bs(h){let n,a,o,g=String.raw`<div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">alembic revision --autogenerate -m "Initial migration"</div></div>`+"";return{c(){n=i("pre"),a=i("code"),o=new fn(!1),this.h()},l(l){n=t(l,"PRE",{});var p=u(n);a=t(p,"CODE",{class:!0});var m=u(a);o=un(m,!1),m.forEach(r),p.forEach(r),this.h()},h(){o.a=null,b(a,"class","language-plain")},m(l,p){z(l,n,p),e(n,a),o.m(g,a)},p:mn,d(l){l&&r(n)}}}function zs(h){let n,a,o,g=String.raw`<div class="code-line"><div class="code-linenotation"><span class="no-line-number"></span><span class="no-line-diff"></span></div><div class="code-content">alembic upgrade <span class="token function">head</span></div></div>`+"";return{c(){n=i("pre"),a=i("code"),o=new fn(!1),this.h()},l(l){n=t(l,"PRE",{});var p=u(n);a=t(p,"CODE",{class:!0});var m=u(a);o=un(m,!1),m.forEach(r),p.forEach(r),this.h()},h(){o.a=null,b(a,"class","language-bash")},m(l,p){z(l,n,p),e(n,a),o.m(g,a)},p:mn,d(l){l&&r(n)}}}function Vs(h){let n,a,o="레거시 프로젝트를 담당하다보면 model이 선언되어있지않고, DB 관리가 안되고 있는 경우도 종종 있다.",g,l,p="아래의 방법으로 기존 DB 테이블들을 alembic으로 관리해보자.",m,V,ts="Alembic은 SQLAlchemy와 함께 사용되며, 데이터베이스 스키마를 버전 관리할 수 있도록 도와준다.",En,N,ls="가장 좋은 점은 파이썬 코드로 관리가 가능하여, git으로 관리가 가능하다고 생각한다.",Pn,q,os='<a href="#1-alembic">1. Alembic 설치</a>',Hn,Q,cs="먼저 Alembic을 설치",Ln,U,y,Tn,gn,M,qn,A,ds='<a href="#2-alembic">2. Alembic 초기화</a>',Mn,W,ps="프로젝트 디렉터리에서 Alembic을 초기화",An,F,vs="alembic 디렉터리를 생성하고 기본 구성 파일과 스크립트를 생성",Dn,G,E,In,D,rs='<a href="#3-alembic">3. Alembic 설정 파일 구성</a>',Sn,J,fs="alembic.ini 파일을 열어 데이터베이스 연결 문자열을 설정",Rn,K,us="예를 들어, PostgreSQL 데이터베이스를 사용한다면:",jn,X,P,On,bn,I,Bn,S,ms='<a href="#4-env-py">4. env.py 파일 설정</a>',zn,Y,gs="alembic/env.py 파일을 열고 SQLAlchemy 모델을 연결",Vn,Z,bs="기존 SQLAlchemy 모델을 사용하여 데이터베이스를 반영하자.",Nn,nn,H,Qn,R,hs='<a href="#5">5. 기존 데이터베이스 상태 스냅샷 생성</a>',Un,sn,_s="기존 데이터베이스의 현재 상태를 스냅샷으로 생성하여 Alembic이 현재 상태를 인식하도록 한다.",Wn,en,ks="이를 위해 revision --autogenerate 명령어를 사용합니다.",Fn,an,L,Gn,tn,$s="이 명령어는 현재 데이터베이스 스키마를 기반으로 새로운 마이그레이션 파일을 생성한다.",Jn,ln,xs="생성된 파일을 열어 마이그레이션 코드가 올바른지 확인은 필수이다.",Kn,j,Cs='<a href="#6">6. 데이터베이스 마이그레이션 적용</a>',Xn,on,ws="생성된 마이그레이션 파일을 사용하여 데이터베이스에 변경 사항을 적용하면 끝난다.",Yn,cn,T,Zn,O,ys='<a href="#">요약</a>',ns,dn,Es="전체 과정을 아래와 같이 요약해 보았다.",ss,pn,Ps="<li>Alembic을 설치하고 초기화합니다.</li> <li>alembic.ini</li> <li>env.py</li> <li>기존 데이터베이스 상태를 스냅샷으로 생성합니다.</li> <li>데이터베이스 마이그레이션을 적용합니다.</li>",es,hn,B,as,vn,Hs=`작성하다보니, model.py code도 어디에서도 찾을 수 없고 수 십, 수 백 테이블을 사용 있다면… models을 한번에 생성하는
      방법은 없을까..?! 고민된다.`,yn;return y=new rn({props:{$$slots:{default:[Ss]},$$scope:{ctx:h}}}),M=new is({props:{src:"/use-alembic-to-already-operation-db/0_Untitled.png",alt:"image"}}),E=new rn({props:{$$slots:{default:[Rs]},$$scope:{ctx:h}}}),P=new rn({props:{$$slots:{default:[js]},$$scope:{ctx:h}}}),I=new is({props:{src:"/use-alembic-to-already-operation-db/1_Untitled.png",alt:"image"}}),H=new rn({props:{$$slots:{default:[Os]},$$scope:{ctx:h}}}),L=new rn({props:{$$slots:{default:[Bs]},$$scope:{ctx:h}}}),T=new rn({props:{$$slots:{default:[zs]},$$scope:{ctx:h}}}),B=new is({props:{src:"/use-alembic-to-already-operation-db/2_Untitled.png",alt:"image"}}),{c(){n=i("article"),a=i("p"),a.textContent=o,g=c(),l=i("p"),l.textContent=p,m=c(),V=i("p"),V.textContent=ts,En=c(),N=i("p"),N.textContent=ls,Pn=c(),q=i("h1"),q.innerHTML=os,Hn=c(),Q=i("p"),Q.textContent=cs,Ln=c(),U=i("div"),_(y.$$.fragment),Tn=c(),gn=i("p"),_(M.$$.fragment),qn=c(),A=i("h1"),A.innerHTML=ds,Mn=c(),W=i("p"),W.textContent=ps,An=c(),F=i("p"),F.textContent=vs,Dn=c(),G=i("div"),_(E.$$.fragment),In=c(),D=i("h1"),D.innerHTML=rs,Sn=c(),J=i("p"),J.textContent=fs,Rn=c(),K=i("p"),K.textContent=us,jn=c(),X=i("div"),_(P.$$.fragment),On=c(),bn=i("p"),_(I.$$.fragment),Bn=c(),S=i("h1"),S.innerHTML=ms,zn=c(),Y=i("p"),Y.textContent=gs,Vn=c(),Z=i("p"),Z.textContent=bs,Nn=c(),nn=i("div"),_(H.$$.fragment),Qn=c(),R=i("h1"),R.innerHTML=hs,Un=c(),sn=i("p"),sn.textContent=_s,Wn=c(),en=i("p"),en.textContent=ks,Fn=c(),an=i("div"),_(L.$$.fragment),Gn=c(),tn=i("p"),tn.textContent=$s,Jn=c(),ln=i("p"),ln.textContent=xs,Kn=c(),j=i("h1"),j.innerHTML=Cs,Xn=c(),on=i("p"),on.textContent=ws,Yn=c(),cn=i("div"),_(T.$$.fragment),Zn=c(),O=i("h3"),O.innerHTML=ys,ns=c(),dn=i("p"),dn.textContent=Es,ss=c(),pn=i("ol"),pn.innerHTML=Ps,es=c(),hn=i("p"),_(B.$$.fragment),as=c(),vn=i("p"),vn.textContent=Hs,this.h()},l(v){n=t(v,"ARTICLE",{slot:!0});var s=u(n);a=t(s,"P",{"data-svelte-h":!0}),f(a)!=="svelte-2ua3pe"&&(a.textContent=o),g=d(s),l=t(s,"P",{"data-svelte-h":!0}),f(l)!=="svelte-f2nwjn"&&(l.textContent=p),m=d(s),V=t(s,"P",{"data-svelte-h":!0}),f(V)!=="svelte-10vv8nm"&&(V.textContent=ts),En=d(s),N=t(s,"P",{"data-svelte-h":!0}),f(N)!=="svelte-1hop3tm"&&(N.textContent=ls),Pn=d(s),q=t(s,"H1",{id:!0,"data-svelte-h":!0}),f(q)!=="svelte-9rqxgm"&&(q.innerHTML=os),Hn=d(s),Q=t(s,"P",{"data-svelte-h":!0}),f(Q)!=="svelte-17mfj3t"&&(Q.textContent=cs),Ln=d(s),U=t(s,"DIV",{class:!0});var _n=u(U);k(y.$$.fragment,_n),_n.forEach(r),Tn=d(s),gn=t(s,"P",{});var kn=u(gn);k(M.$$.fragment,kn),kn.forEach(r),qn=d(s),A=t(s,"H1",{id:!0,"data-svelte-h":!0}),f(A)!=="svelte-1a5joi5"&&(A.innerHTML=ds),Mn=d(s),W=t(s,"P",{"data-svelte-h":!0}),f(W)!=="svelte-1w2g7jj"&&(W.textContent=ps),An=d(s),F=t(s,"P",{"data-svelte-h":!0}),f(F)!=="svelte-dktraa"&&(F.textContent=vs),Dn=d(s),G=t(s,"DIV",{class:!0});var $n=u(G);k(E.$$.fragment,$n),$n.forEach(r),In=d(s),D=t(s,"H1",{id:!0,"data-svelte-h":!0}),f(D)!=="svelte-f62z0w"&&(D.innerHTML=rs),Sn=d(s),J=t(s,"P",{"data-svelte-h":!0}),f(J)!=="svelte-1tozgxa"&&(J.textContent=fs),Rn=d(s),K=t(s,"P",{"data-svelte-h":!0}),f(K)!=="svelte-8a3ntt"&&(K.textContent=us),jn=d(s),X=t(s,"DIV",{class:!0});var xn=u(X);k(P.$$.fragment,xn),xn.forEach(r),On=d(s),bn=t(s,"P",{});var Cn=u(bn);k(I.$$.fragment,Cn),Cn.forEach(r),Bn=d(s),S=t(s,"H1",{id:!0,"data-svelte-h":!0}),f(S)!=="svelte-wgchfj"&&(S.innerHTML=ms),zn=d(s),Y=t(s,"P",{"data-svelte-h":!0}),f(Y)!=="svelte-upe6xt"&&(Y.textContent=gs),Vn=d(s),Z=t(s,"P",{"data-svelte-h":!0}),f(Z)!=="svelte-6u0uvn"&&(Z.textContent=bs),Nn=d(s),nn=t(s,"DIV",{class:!0});var wn=u(nn);k(H.$$.fragment,wn),wn.forEach(r),Qn=d(s),R=t(s,"H1",{id:!0,"data-svelte-h":!0}),f(R)!=="svelte-1bmlp6m"&&(R.innerHTML=hs),Un=d(s),sn=t(s,"P",{"data-svelte-h":!0}),f(sn)!=="svelte-1gi7a1t"&&(sn.textContent=_s),Wn=d(s),en=t(s,"P",{"data-svelte-h":!0}),f(en)!=="svelte-kg5k23"&&(en.textContent=ks),Fn=d(s),an=t(s,"DIV",{class:!0});var Ls=u(an);k(L.$$.fragment,Ls),Ls.forEach(r),Gn=d(s),tn=t(s,"P",{"data-svelte-h":!0}),f(tn)!=="svelte-1qc2qce"&&(tn.textContent=$s),Jn=d(s),ln=t(s,"P",{"data-svelte-h":!0}),f(ln)!=="svelte-10uhkmp"&&(ln.textContent=xs),Kn=d(s),j=t(s,"H1",{id:!0,"data-svelte-h":!0}),f(j)!=="svelte-1r2oyoq"&&(j.innerHTML=Cs),Xn=d(s),on=t(s,"P",{"data-svelte-h":!0}),f(on)!=="svelte-dsyruc"&&(on.textContent=ws),Yn=d(s),cn=t(s,"DIV",{class:!0});var Ts=u(cn);k(T.$$.fragment,Ts),Ts.forEach(r),Zn=d(s),O=t(s,"H3",{id:!0,"data-svelte-h":!0}),f(O)!=="svelte-1gd3s1t"&&(O.innerHTML=ys),ns=d(s),dn=t(s,"P",{"data-svelte-h":!0}),f(dn)!=="svelte-1wuwd5x"&&(dn.textContent=Es),ss=d(s),pn=t(s,"OL",{"data-svelte-h":!0}),f(pn)!=="svelte-529fnv"&&(pn.innerHTML=Ps),es=d(s),hn=t(s,"P",{});var qs=u(hn);k(B.$$.fragment,qs),qs.forEach(r),as=d(s),vn=t(s,"P",{"data-svelte-h":!0}),f(vn)!=="svelte-1ltopu"&&(vn.textContent=Hs),s.forEach(r),this.h()},h(){b(q,"id","1-alembic"),b(U,"class","code-block"),b(A,"id","2-alembic"),b(G,"class","code-block"),b(D,"id","3-alembic"),b(X,"class","code-block"),b(S,"id","4-env-py"),b(nn,"class","code-block"),b(R,"id","5"),b(an,"class","code-block"),b(j,"id","6"),b(cn,"class","code-block"),b(O,"id",""),b(n,"slot","post_content")},m(v,s){z(v,n,s),e(n,a),e(n,g),e(n,l),e(n,m),e(n,V),e(n,En),e(n,N),e(n,Pn),e(n,q),e(n,Hn),e(n,Q),e(n,Ln),e(n,U),$(y,U,null),e(n,Tn),e(n,gn),$(M,gn,null),e(n,qn),e(n,A),e(n,Mn),e(n,W),e(n,An),e(n,F),e(n,Dn),e(n,G),$(E,G,null),e(n,In),e(n,D),e(n,Sn),e(n,J),e(n,Rn),e(n,K),e(n,jn),e(n,X),$(P,X,null),e(n,On),e(n,bn),$(I,bn,null),e(n,Bn),e(n,S),e(n,zn),e(n,Y),e(n,Vn),e(n,Z),e(n,Nn),e(n,nn),$(H,nn,null),e(n,Qn),e(n,R),e(n,Un),e(n,sn),e(n,Wn),e(n,en),e(n,Fn),e(n,an),$(L,an,null),e(n,Gn),e(n,tn),e(n,Jn),e(n,ln),e(n,Kn),e(n,j),e(n,Xn),e(n,on),e(n,Yn),e(n,cn),$(T,cn,null),e(n,Zn),e(n,O),e(n,ns),e(n,dn),e(n,ss),e(n,pn),e(n,es),e(n,hn),$(B,hn,null),e(n,as),e(n,vn),yn=!0},p(v,s){const _n={};s&1&&(_n.$$scope={dirty:s,ctx:v}),y.$set(_n);const kn={};s&1&&(kn.$$scope={dirty:s,ctx:v}),E.$set(kn);const $n={};s&1&&($n.$$scope={dirty:s,ctx:v}),P.$set($n);const xn={};s&1&&(xn.$$scope={dirty:s,ctx:v}),H.$set(xn);const Cn={};s&1&&(Cn.$$scope={dirty:s,ctx:v}),L.$set(Cn);const wn={};s&1&&(wn.$$scope={dirty:s,ctx:v}),T.$set(wn)},i(v){yn||(x(y.$$.fragment,v),x(M.$$.fragment,v),x(E.$$.fragment,v),x(P.$$.fragment,v),x(I.$$.fragment,v),x(H.$$.fragment,v),x(L.$$.fragment,v),x(T.$$.fragment,v),x(B.$$.fragment,v),yn=!0)},o(v){C(y.$$.fragment,v),C(M.$$.fragment,v),C(E.$$.fragment,v),C(P.$$.fragment,v),C(I.$$.fragment,v),C(H.$$.fragment,v),C(L.$$.fragment,v),C(T.$$.fragment,v),C(B.$$.fragment,v),yn=!1},d(v){v&&r(n),w(y),w(M),w(E),w(P),w(I),w(H),w(L),w(T),w(B)}}}function Ns(h){let n,a;return n=new Is({props:{$$slots:{post_content:[Vs]},$$scope:{ctx:h}}}),{c(){_(n.$$.fragment)},l(o){k(n.$$.fragment,o)},m(o,g){$(n,o,g),a=!0},p(o,[g]){const l={};g&1&&(l.$$scope={dirty:g,ctx:o}),n.$set(l)},i(o){a||(x(n.$$.fragment,o),a=!0)},o(o){C(n.$$.fragment,o),a=!1},d(o){w(n,o)}}}class Gs extends As{constructor(n){super(),Ds(this,n,null,Ns,Ms,{})}}export{Gs as component};
